riffoser

by anon@anonymous.lv
( contact at irc.freenode.net #riffoser )
========

A C library to be used for comfortable music coding (see examples). generating RIFF sounds, combining them into tracks, adding effects, etc. other formats (MP3, S3M, ...) exporting is planned later

===============================================

OBTAINING THE SOURCE

to get latest buildable source tree, install git, then use command:
git clone https://github.com/anon4ik/riffoser.git



BUILDING LIBRARY

first run "./configure" with necessary parameters (see ./configure --help)


run "make" to build source
run "make examples" to build files in examples/ directory
run "make tests" to build test files
run "make check" to build and run test files (you will have some .wav and .ogg files in tests/*.tmp directory after that)
run "make check-listen" to listen files generated by "make check" (you must have aplay installed). Ctrl-C will abort current file, use Ctrl-Z and kill job to abort all
run "make clean" to clean compiled source
run "make distclean" to remove Makefiles too (to run ./configure again on totally clean source)
run "make install" (with root privileges) to install compiled source (library and riffoser.h header)
run "make uninstall" (with root privileges) to uninstall compiled source from system

*** note: commands "make check" and "make check-listen" respect TESTS environment variable (i.e. make TESTS="singlewaves stereowaves" check-listen), which you can use to specify which tests do you want to run.
  if not specified, all tests will be run.
  Available tests:
	singlewaves - will create single wave and save it to various WAV formats (MONO, 8000/11025/22050/44100/48000/96000/192000 samplerate, 8/16/32-bit quality)
	stereowaves - will generate various stereo waves and save it to various WAV formats
	wav_readwrite - test will check WAV format reads/writes. it will generate a wave, save it to *.wav_orig file, then read this file and save it to final *.wav. will try all formats
	ogg_readwrite - same with OGG format
*** note that "make check" does not guarantee that everything is working properly even if there's no failures. the best way to make sure of it is using "make check-listen" and checking if sounds are really generated correctly.


USING LIBRARY
use -lriffoser flag in gcc command to link with riffoser
use #include <riffoser.h> to use its header


CODE DOCUMENTATION

documentation not ready yet (mainly because code is changing too rapidly now), please see examples/ to get the idea


FOR CONTRIBUTORS
1) it is adviceable to contact riffoser team on IRC - irc.freenode.net #riffoser prior to starting anything. maybe somebody already doing work you are planning? maybe your feature isn't really needed? you better ask us first.
2) create a branch off "master" and work on it. it can be per-feature branch, or per-user branch
3) you MUST do "make distclean" before making a commit, to prevent temporary files getting into repository
4) also you must run "autoconf" prior to making a commit (if you changed anything in configure.ac), so configure script will be up to date
5) after doing commit, push your branch to origin and create a pull request on github
6) code well. change configure.ac and Makefile.in accordingly to features your code requires. use IFDEFs to check if your feature is to be built (i.e. if libmp3lame is available). don't assume every computer in the world will have prerequisites for your code, and any user will want it. make stub functions (i.e. that output errors like "error: riffoser was compiled without blah support") if building without
7) no special code formatting is enforced, however, it is adviceable to comment things others may need to depend on in future
8) you should always be in contact, preferrably on irc.freenode.net #riffoser , so we may discuss code comfortably
9) you should use C , not some external languages like python or java that will make a mess. you may use C++, but make sure you alter build system accordingly for that (i.e. add checks for g++)
10) code should be POSIX-compliant (work on most *NIX systems). if you require some i.e. linux-only feature, make it optional and reflect it in configure.ac (so riffoser could just build without it on unsupported platforms)
11) if you need to keep external files in source tree (i.e. netbeans's nbproject/) add it into .gitignore prior to committing
12) riffoser.h is to be exported to system include directory. so, you put there only things that must be exported, not some MAX(a,b) defines that you will need. such defines should go to riffoser_r.h (runtime header) which is used only for library compilation. that's why .c files must include riffoser_r.h and not riffoser.h
13) functions, defines and everything else that will be exported must start with riffoser_ , to avoid possible conflicts with other libraries
14) don't push unbuildable source to origin. make it build first (and doing "make check" is recommended)


WHAT DO WE NEED ATM
1) mp3 support (loading / saving), preferrably via libmp3lame
2) ogg support (libogg), s3m support (libmikmod)
3) other WAV formats (non-PCM formats, compressed formats)
4) writing documentation and updating it to reflect changes and new features in library. README.md , man pages, maybe a wiki. etc
5) creating examples that show various features of library
6) maybe we need a website. info, documentation, maybe interactive code interpretation / music composition with code output, etc
7) maybe some UI music composer/streamer/sampler to demonstrate and test library functionality
8) implementing new wave functions. now there are SQUARE, TRIANGLE, SINE and a bunch of experimental wave types. maybe you know some other?
9) implementing instruments. instrument is a struct that you can add waves to and then play it on arbitrary frequences, volumes, etc. you may see instrument as a compound dynamic wave
10) effects for instruments. obviously, instruments should be implemented first. effects may consist of fadein, fadeout, frequency changes, or some more complicated ones.
11) bugfixes. if you found a bug, you may fix it, or you may tell us about it. either way we will be happy.
12) sound output support (OSS,ALSA,maybe others). i.e. functions like riffoser_track_play
13) maybe sound input support (microphone etc)
14) maybe web-based output similar to icecast
15) various utils, like converting WAV formats, etc
16) pthreads support to utilize multi-code processors better
17) synthesizer functionality. functions for creating various beats, riffs, drums, piano, etc etc etc.
18) any other good idea you thought of. just enter irc.freenode.net #riffoser and tell us what's on your mind.


